name: workflow  #  Main GitHub Actions workflow for CI/CD

on:
  push:
    branches:
      - main  # Trigger only when pushing to the main branch
    paths-ignore:
      - "README.md"  # Ignore changes to README.md file

jobs:
  integration:  #  Continuous Integration Job
    name: Continuous Integration
    runs-on: ubuntu-latest  # Use GitHub-hosted Ubuntu runner
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Clone the repository code

      - name: Lint Code
        run: echo "Linting repository"  # Placeholder for linting tools (e.g., flake8, ESLint)

      - name: Run unit tests
        run: echo "Running unit tests"  # Placeholder for actual test command (e.g., pytest)

  build-and-push-ecr-image:  # Build and push Docker image to ECR
    name: Continuous Delivery
    needs: integration  # Wait until CI passes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip  # Install essential CLI tools

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1  # Authenticate with AWS using GitHub secrets
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  # Login to AWS ECR and get registry URL

      - name: Build, tag and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  # Build Docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  # Push image to ECR
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT  # Export image URL

  Continuous-Deployment:  # Deployment Job on self-hosted server
    needs: build-and-push-ecr-image  # Runs after image is pushed
    runs-on: self-hosted  # Uses self-hosted runner (e.g., EC2 instance)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1  # Login to pull from ECR

      - name: Pull latest Docker image
        run: |
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest  # Pull latest image

      - name: Stop and remove existing container if running
        run: |
          docker ps -q --filter "name=networksecurity" | grep -q . && docker stop networksecurity && docker rm -fv networksecurity || echo "No container to remove"

      - name: Run new Docker container
        run: |
          docker run -d -p 8080:8080 --ipc="host" \
            --name=networksecurity \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_ID }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest  # Start container from pulled image

      - name: Clean up unused Docker resources
        run: docker system prune -f  # Clean up unused images, networks, containers, etc.
